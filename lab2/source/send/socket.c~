#include "socket_head.h"

int main(int argc, char *argv[])
{
	int socket_fd;
	char buffer[BUFFER_SEND];

	if(argc != 3)
	{
		printf("Error number of arguments\n");
		return -1;
	}

	if(strcmp(argv[2], "ARP") == 0)
	{
		if((socket_fd = socket(PF_PACKET,SOCK_RAW,ETH_P_ARP)) < 0)
		{
			printf("ARP : Error create raw socket!\n");
			return -1;
		}
		struct sockaddr_ll arp_addr,broad_addr;
		bzero(&arp_addr,sizeof(struct sockaddr_ll));
		bzero(&broad_addr,sizeof(struct sockaddr_ll));
		arp_addr.sll_family = AF_PACKET;
		arp_addr.sll_protocol = htons(ETH_P_ARP);
		arp_addr.sll_ifindex = 2;
		arp_addr.sll_hatype = ARPHRD_ETHER;
		arp_addr.sll_pkttype = PACKET_HOST;
		arp_addr.sll_halen = ETH_ALEN;

		broad_addr.sll_family = AF_PACKET;
		broad_addr.sll_protocol = htons(ETH_P_ARP);
		broad_addr.sll_ifindex = 2;
		broad_addr.sll_hatype = ARPHRD_ETHER;
		broad_addr.sll_pkttype = PACKET_BROADCAST;
		broad_addr.sll_halen = ETH_ALEN;
		int i;
		for(i = 0; i < 8; i++)
			broad_addr.sll_addr[i] = 'f';
		bind(socket_fd,(struct sockaddr *)&arp_addr,sizeof(struct sockaddr_ll));
		while(1)
		{
			bzero(&buffer[sizeof(struct ARP)],BUFFER_SEND - sizeof(struct ARP));
			sendto(socket_fd,buffer,sizeof(struct ARP),0,(struct sockaddr *)&broad_addr,sizeof(struct sockaddr_ll));
			sleep(1);
		}
	}
	else
	{
		if((socket_fd = socket(AF_INET,SOCK_RAW,IPPROTO_ICMP)) < 0)
		{
			printf("ICMP : Error create raw socket!\n");
			return -1;
		}
		struct sockaddr_in ip_addr;
		bzero(&ip_addr,sizeof(struct sockaddr_in));
		if(inet_aton(argv[1],&ip_addr.sin_addr) == 0)
		{
			printf("Error IP target!\n");
			return -1;
		}
		ip_addr.sin_family = AF_INET;
		ip_addr.sin_port = 0;

		int count = 0;
		while(1)
		{
			bzero(&buffer[sizeof(struct ICMP)],BUFFER_SEND - sizeof(struct ICMP));
			struct ICMP *icmp = (void *)buffer;
			icmp->type = ICMP_ECHO;
			icmp->code = 0;
			icmp->id = getpid();
			icmp->sequence = htons(count++);
			icmp->check_sum = checksum((void *)icmp,sizeof(struct ICMP) + 32);
			icmp->timestamp = 0;
			sendto(socket_fd,buffer,sizeof(struct ICMP) + 32,0,(struct sockaddr*)&ip_addr,sizeof(struct sockaddr_in));
			printf("%d bytes from %d.%d.%d.%d: icmp_seq = %d\n",sizeof(struct ICMP) + 32,atoi(&argv[1][0]),atoi(&argv[1][4]),atoi(&argv[1][8]),atoi(&argv[1][11]),count);
			sleep(1);
		}
	}
	return 0;
}
